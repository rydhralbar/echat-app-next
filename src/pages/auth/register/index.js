import React, { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { FcGoogle } from "react-icons/fc";
import { MdArrowBack } from "react-icons/md";
import styles from "@/styles/pages/Register.module.scss";
import { useRouter } from "next/router";
import {
  createUserWithEmailAndPassword,
  GoogleAuthProvider,
  signInWithPopup,
} from "firebase/auth";
import { auth } from "@/utils/firebase";
import { useEffect } from "react";
import * as useDb from "@/utils/firebaseDb";

const provider = new GoogleAuthProvider();

const Register = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [usersList, setUsersList] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [isSuccess, setIsSuccess] = useState(false);

  const router = useRouter();

  useEffect(() => {
    useDb.getData("users", (snapshot) => {
      const data = snapshot.val();

      if (data) {
        setUsersList(data);
      }
    });
  }, []);

  const registerManual = () => {
    setIsLoading(true);
    createUserWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        setIsLoading(false);
        setIsError(false);

        const user = userCredential?.user;

        useDb.sendData("users", {
          ...usersList,
          [user.uid]: {
            verified_email: user?.emailVerified,
            timestamp: new Date().getTime(),
            user_id: user?.uid,
            photo: user?.photoURL,
            name: name,
            is_online: true,
          },
        });

        setIsSuccess(true);
        setTimeout(() => {
          router.replace("/auth/login");
        }, 1600);
      })
      .catch((error) => {
        setIsLoading(false);
        const errorCode = error?.code?.slice(5).split("-").join(" ");
        const errorMessage =
          errorCode?.charAt(0).toUpperCase() + errorCode?.slice(1);
        // const errorMessage = error?.message;

        setIsError(true);
        setIsSuccess(false);
        setErrorMsg(errorMessage);
      });
  };

  const registerGoogle = () => {
    setIsLoading(true);
    signInWithPopup(auth, provider)
      .then((result) => {
        setIsLoading(false);
        setIsError(false);

        // const token = credential?.accessToken;
        const user = result?.user;

        useDb.sendData("users", {
          ...usersList,
          [user.uid]: {
            verified_email: user?.emailVerified,
            timestamp: new Date().getTime(),
            user_id: user?.uid,
            photo: user?.photoURL,
            name: user?.displayName,
            is_online: true,
          },
        });

        setIsSuccess(true);
        setTimeout(() => {
          router.replace("/auth/login");
        }, 1600);
      })
      .catch((error) => {
        setIsLoading(false);
        setIsSuccess(false);
        const errorCode = error?.code?.slice(5).split("-").join(" ");
        const errorMessage =
          errorCode?.charAt(0).toUpperCase() + errorCode?.slice(1);

        // const errorMessage = error?.message;
        const email = error?.customData?.email;
        const credential = GoogleAuthProvider?.credentialFromError(error);

        setIsError(true);
        setErrorMsg(`Mantap ${error?.code === NaN ? "" : errorMessage}`);
      });
  };

  return (
    <>
      <Head>
        <title>Register | eChat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="container">
          <div className={`d-flex justify-content-center ${styles.allForm}`}>
            <div className={styles.wrapper}>
              <div>
                <MdArrowBack
                  onClick={() => router.back()}
                  style={{ width: "25px", height: "25px" }}
                />
                <h3
                  className="text-center"
                  style={{ fontSize: "30px", marginBottom: "20px" }}
                >
                  Register
                </h3>
                <hr className="mb-3" />
              </div>

              {isError && (
                <div className="alert alert-error shadow-lg">
                  <div>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="stroke-current flex-shrink-0 h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    <span>{errorMsg}</span>
                  </div>
                </div>
              )}

              {isSuccess && (
                <div className="alert alert-success shadow-lg">
                  <div>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="stroke-current flex-shrink-0 h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    <span>Register successful, please wait</span>
                  </div>
                </div>
              )}
              <div>
                <div className="mt-4 mb-3">
                  <label className="form-label">Name</label>
                  <input
                    type="email"
                    className="form-control"
                    placeholder="Type your name"
                    onChange={(e) => setName(e.target.value)}
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Email address</label>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Type your email"
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
                {/* <div className="mb-3">
                  <label className="form-label">Phone Number</label>
                  <input
                    type="tel"
                    className="form-control"
                    placeholder="Type your phone number"
                  />
                </div> */}
                <div className="mb-4">
                  <label className="form-label">Password</label>
                  <input
                    type="password"
                    className="form-control"
                    placeholder="Type your new password"
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>
                <div>
                  <button
                    type="submit"
                    className={`btn btn-primary ${styles.registerButton}`}
                    onClick={registerManual}
                    disabled={isLoading}
                  >
                    {isLoading ? "Loading..." : "Register"}
                  </button>
                  <p className="mt-3 mb-3 text-center">Or register with</p>
                  <button
                    type="submit"
                    className={`btn ${styles.googleButton}`}
                    onClick={registerGoogle}
                    disabled={isLoading}
                  >
                    <FcGoogle className="me-2" />
                    Google
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Register;
